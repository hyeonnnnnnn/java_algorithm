131118.
-- 코드를 입력하세요
SELECT RI.REST_ID
         , RI.REST_NAME
         , RI.FOOD_TYPE
         , RI.FAVORITES
         , RI.ADDRESS
         , RR.SCORE
FROM REST_INFO RI
INNER JOIN (SELECT REST_ID
                 , ROUND(AVG(REVIEW_SCORE), 2) SCORE
            FROM REST_REVIEW
            GROUP BY REST_ID) RR ON RI.REST_ID = RR.REST_ID
WHERE RI.ADDRESS LIKE '서울%'
ORDER BY RR.SCORE DESC, RI.FAVORITES DESC

131117.
-- 코드를 입력하세요
 SELECT FP.PRODUCT_ID          AS PRODUCT_ID
      , FP.PRODUCT_NAME        AS PRODUCT_NAME
      , (FP.PRICE * FO.AMOUNT) AS TOTAL_SALES
FROM FOOD_PRODUCT FP
INNER JOIN (SELECT PRODUCT_ID
                 , SUM(AMOUNT) AS AMOUNT
            FROM FOOD_ORDER
            WHERE TO_CHAR(PRODUCE_DATE, 'YYYYMM') = '202205'
            GROUP BY PRODUCT_ID) FO ON FP.PRODUCT_ID = FO.PRODUCT_ID
ORDER BY TOTAL_SALES DESC, PRODUCT_ID

131116.
-- 코드를 입력하세요
SELECT A.*
     , B.PRODUCT_NAME
FROM (SELECT CATEGORY AS CATEGORY
           , MAX(PRICE) AS MAX_PRICE
      FROM FOOD_PRODUCT 
      GROUP BY CATEGORY 
      HAVING CATEGORY IN ('과자', '국' , '김치' , '식용유')) A LEFT JOIN 
(SELECT CATEGORY
      , PRODUCT_NAME
      , PRICE
 FROM FOOD_PRODUCT) B ON (A.MAX_PRICE = B.PRICE AND  A.CATEGORY = B.CATEGORY)
ORDER BY MAX_PRICE DESC

62284.
-- 코드를 입력하세요
SELECT CART_ID
FROM CART_PRODUCTS 
GROUP BY CART_ID
HAVING SUM(CASE WHEN NAME = ('Yogurt') THEN 1 ELSE 0 END) > 0
    AND SUM(CASE WHEN NAME = ('Milk') THEN 1 ELSE 0 END) > 0
ORDER BY CART_ID